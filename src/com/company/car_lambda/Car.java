package com.company.car_lambda;

/**
 * Задание.
 * 1.Реализовать класс автомобиль, который содержит поля:
 * a.Марка автомобиля  (компания и модель, например, toyota ipsum)
 * b.Стоимость автомобиля  (руб)
 * c.Мощность автомобиля (л.с.)
 * 2.Добавить в класс все необходимые методы.
 * 3.Создать список автомобилей, заполнить его автомобилями с произвольными данными.
 * 4.Вывести данные об автомобилях на экран.
 * 5.Сделать выборку автомобилей ценой более 1 000 000 руб. Вывести данные на экран.
 * 6.Отсортировать список автомобилей по цене и мощности (автомобили с одной ценой *    сортировались по мощности). Вывести результат на экран.
 * 7.Найти автомобиль с указанной стоимостью
 * 8.Случилась инфляция, необходимо увеличить стоимость всех авто на 20%.
 * 9.Случилось снижение инфляции, необходимо снизить стоимость всех авто на 20%.
 * Примечание:
 * - Реализовать каждый пункт используя разные подходы:
 * - реализация объекта функционального интерфейса через класс
 * - реализация объекта функционального интерфейса через анонимный класс
 * - лямбда-выражения
 * при выполнении заданий минимально использовать цикл и императивный подход.
 */

// класс "Автомобиль"
public class Car {

    // поля класса "Автомобиль"
    private String nameModel;  //название авто и модель
    private double price;  //Стоимость автомобиля
    private int power;   //мощность двигателя л.с.

    // конструкторы
    // 1. конструктор без параметров - по умолчанию
    public Car() {
        // инициализация полей по умолчанию
        nameModel = " \"Model Car\"";
        price = 1000000.0;
        power = 80;

    }

    // 2. конструктор с 3 параметрами
    public Car(String nameModel, double price, int power) {
        this.nameModel = nameModel;
        this.price = price;
        this.power = power;

    }

    // getters and setters

    public double getPrice() {
        return price;
    }

    public void setPrice(double price) {
        this.price = price;
    }

    public int getPower() {
        return power;
    }

    // методы
    // 1. метод представления класса в виде строки - перегрузка метода toString
    @Override
    public String toString() {
        return nameModel + ", мощность: " + power + " л.с., " + "цена " + price + " руб. ";
    }

}//class close
